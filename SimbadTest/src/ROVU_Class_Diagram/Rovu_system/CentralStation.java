// --------------------------------------------------------
// Code generated by Papyrus Java
// --------------------------------------------------------

package ROVU_Class_Diagram.Rovu_system;

import java.util.List;

import javax.vecmath.Vector3d;

import ROVU_Class_Diagram.Rovu_system.Map;
import ROVU_Class_Diagram.Rovu_system.Observer;
import ROVU_Class_Diagram.Rovu_system.Robot;
import ROVU_Class_Diagram.Rovu_system.Task;

/************************************************************/
/**
 * 
 */
public class CentralStation extends Subject {

	static private final CentralStation INSTANCE = new CentralStation();
	public Map map;
	public Task task;
	
	private CentralStation() {
		task = new Task(Request.sendCoordinatesWithIntervalAndWallFollowing);
	}
	
	public static CentralStation getInstance() {
		return INSTANCE;
	}
	
	public void init(int mapSize) {
		map = new Map(mapSize);
	}
	
	public void start() {
		System.out.println("Central station started");
		pushTask(task, observers); //Let the bots send their coordinates by their own counter interval for now
	}
	
	private void pushTask(Task toPush, List<Observer> ObserversToReceive) {
		for(Observer observer: ObserversToReceive) {
			observer.update(toPush);
		}
	}
	
	/*public void report() {
		pushTask(new Task(Request.sendCoordinates),this.observers);
	}*/
	
	
	public void report(int coordinate1, int coordinate2, Observer observer, RobotDirection direction, double distanceObst, boolean wallFollowing) {
//		if(distanceObst > 0.71 && distanceObst < 1.5) {
//			switch(direction) {
//			case NORTH:
//				map.setGridPointStatus(GridPointStatus.OBSTACLE, coordinate1 ,coordinate2 + 1);	
//				break;
//			case WEST:
//				map.setGridPointStatus(GridPointStatus.OBSTACLE, coordinate1 - 1,coordinate2);	
//				break;
//			case SOUTH:
//				map.setGridPointStatus(GridPointStatus.OBSTACLE, coordinate1 ,coordinate2 - 1);	
//				break;
//			case EAST:
//				map.setGridPointStatus(GridPointStatus.OBSTACLE, coordinate1 + 1 ,coordinate2);	
//				break;
//			default:
//				break;
//				
//			}
//		}
		map.setGridPointStatus(GridPointStatus.COVERED, coordinate1,coordinate2);	
		
		switch(direction) {
		case NORTH:
			if(coordinate1 != 0 && map.getGridPointStatus(coordinate1 - 1, coordinate2) == GridPointStatus.COVERED) {
				observer.update(new Task(Request.turnLeft));
			}
//			else if(!wallFollowing && coordinate1 != 0 && coordinate2 != 0 && map.getGridPointStatus(coordinate1, coordinate2 + 1) != GridPointStatus.COVERED) {
//				observer.update(new Task(Request.turnRight));
//			}
			break;
		case WEST:
			if(coordinate2 != 19 && map.getGridPointStatus(coordinate1, coordinate2 + 1) == GridPointStatus.COVERED) {
				observer.update(new Task(Request.turnLeft));
			}
//			else if(!wallFollowing && coordinate1 != 0 && coordinate2 != 0 && map.getGridPointStatus(coordinate1 - 1, coordinate2) != GridPointStatus.COVERED) {
//				observer.update(new Task(Request.turnRight));
//			}
			break;
		case SOUTH:
			if(coordinate1 != 19 && map.getGridPointStatus(coordinate1 + 1, coordinate2) == GridPointStatus.COVERED) {
				observer.update(new Task(Request.turnLeft));
			}
//			else if(!wallFollowing && coordinate1 != 0 && coordinate2 != 0 && map.getGridPointStatus(coordinate1 + 1, coordinate2) != GridPointStatus.COVERED) {
//				observer.update(new Task(Request.turnRight));
//			}
			break;
		case EAST:
			if(coordinate2 != 0 && map.getGridPointStatus(coordinate1, coordinate2 - 1) == GridPointStatus.COVERED) {
				observer.update(new Task(Request.turnLeft));
			}
//			else if(!wallFollowing && coordinate1 != 0 && coordinate2 != 0 && map.getGridPointStatus(coordinate1, coordinate2 - 1) != GridPointStatus.COVERED) {
//				observer.update(new Task(Request.turnRight));
//			}
			break;
		default:
			break;
			
		}
		if(map.getCoveredPercentage() > 99.0) {
			pushTask(new Task(Request.goHome), observers);
		}
	}
};
