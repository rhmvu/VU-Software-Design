// --------------------------------------------------------
// Code generated by Papyrus Java
// --------------------------------------------------------

package ROVU_Class_Diagram.Rovu_system;
import simbad.gui.*;
import simbad.sim.*;

import javax.vecmath.Color3f;
import javax.vecmath.Vector3d;

import java.awt.Color;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.GridLayout;
import java.awt.LayoutManager;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;

import javax.vecmath.Color3f;
import javax.vecmath.Vector3d;
import javax.vecmath.Vector3f;

import simbad.sim.Box;
import simbad.sim.EnvironmentDescription;
import simbad.sim.Wall;

import javax.swing.*;
import javax.swing.border.EmptyBorder;

import ROVU_Class_Diagram.Rovu_system.CentralStation;
import ROVU_Class_Diagram.Rovu_system.ObstacleFactory;
import javafx.scene.control.ComboBox;
import nl.vu.cs.s2.simbadtest.ExampleRobot;

/************************************************************/
/**
 * 
 */
public class Configuration{
	
	public Environment environment;

	private JFrame frame;
	private JPanel panel;
	private JLabel arches;
	private JLabel boxes;
	private JLabel robots;
	private JComboBox<String> acb;
	private JComboBox<String> bcb;
	private JComboBox<String> rcb;
	private JButton start;
	private JButton stop;
	private File directory;
	
	private int nOfArches;
	private int nOfBoxes;
	private int nOfRobots;
	
	
	public void init() {
		frame = new JFrame("ROVU System");
		frame.setVisible(true);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.setSize(500, 500);
		frame.setLocation(800,300);

		GridLayout layout = new GridLayout(3, 2); 
		layout.setVgap(20);
		layout.setHgap(80);
		panel = new JPanel(layout);
		panel.setBorder(new EmptyBorder(10, 10, 10, 10));

		JLabel boxesLabel = new JLabel("Number of boxes");
		JLabel robotsLabel = new JLabel("Number of robots");

		boxes = new JComboBox<>(new Integer[] {0, 1, 2, 3, 4});
		robots = new JComboBox<>(new Integer[] {1, 2, 3, 4});
		JButton start = new JButton("Start");
		JButton stop = new JButton("Stop");
		start.addActionListener(this);
		stop.addActionListener(this);

		panel.add(boxesLabel);
		panel.add(boxes);
		panel.add(robotsLabel);
		panel.add(robots);
		panel.add(start);
		panel.add(stop);

		frame.add(panel);
		frame.pack();
		frame.setVisible(true);
	}
	
	private void createDirectory() {
		File directory = new File("images");
		if(!directory.exists()) {
			System.out.println("creating directory: " + directory.getName());
			boolean result = false;
			
			try {
				directory.mkdir();
				result = true;
			}catch(SecurityException e) {
				System.out.println(e);
			}
			if(result) {
				System.out.println("Directory created");
			}
		}
		
		frame = new JFrame("Starting the ROVU System");
		frame.setVisible(true);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
	    frame.setSize(350, 300);
	    frame.setLocation(830, 100);
	    
	    panel = new JPanel();
	    panel.setLayout(new FlowLayout(FlowLayout.LEFT));
	    frame.add(panel);
	    
	    boxes = new JLabel("Pick a number of boxes for in the environment");
	    boxes.setVisible(true);
	    panel.add(boxes);
	    
	    String[] boxChoices = {"0", "1", "2", "3", "4"};
	    bcb = new JComboBox<String>(boxChoices);
	    bcb.setSelectedItem("4");
	    bcb.setVisible(true);
	    panel.add(bcb);
	    
	    robots = new JLabel("Pick a number of robots for in the environment");
	    robots.setVisible(true);
	    panel.add(robots);
	    
	    String[] numberOfRobots = {"1", "2", "3", "4"};
	    rcb = new JComboBox<String>(numberOfRobots);
	    rcb.setSelectedItem("4");
	    rcb.setVisible(true);
	    panel.add(rcb);
	    
	    start = new JButton("Start");
	    start.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				nOfBoxes = bcb.getSelectedIndex();
				nOfRobots = rcb.getSelectedIndex() + 1;
				
				//We are aware that the disable method of the type JComponent is deprecated. It does the job so we decided to use it anyway.
				rcb.setEnabled(false);
				bcb.setEnabled(false);
				start.setEnabled(false);
				
				
				// request antialising so that diagonal lines are not "stairy"
		        System.setProperty("j3d.implicitAntialiasing", "true");
		        
		        environment = new Environment(nOfArches, nOfBoxes, nOfRobots);
		        
		        Simbad simframe = new Simbad(environment, false);
		        simframe.update(simframe.getGraphics());	
		        environment.rotateForStartingPosition();
		        environment.station.start();
		        stop.setEnabled(true);
				
			}
		});
	    start.setVisible(true);
	    panel.add(start);
	    
	    stop = new JButton("Stop");
	    stop.setEnabled(false);
	    stop.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				environment.stop();	
				JOptionPane.showMessageDialog(frame, "Mission has stopped and can not be started again!");
				stop.setEnabled(false);
			}
		});
	    stop.setVisible(true);
	    panel.add(stop);
	    
	    panel.validate();
	    panel.repaint();
	}
};
